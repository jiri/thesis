use std::char;

// Helpers {{{

    alpha = [a-zA-Z]

    digit = [0-9]

    hexdigit = #quiet<[0-9a-fA-F]> / #expected("a hexadecimal digit")

    identifier = [a-zA-Z_][a-zA-Z_0-9]*

    ws = #quiet<[ \t]>

    comma = ws* "," ws*

// }}}

// Operands {{{

    label -> Label
        = i:$("."? identifier) { Label::from(i) }

    address -> Address
        = l:label { Address::Label(l) } / u:u16 { Address::Immediate(u) }

    u16_dec -> u16
        = s:$(digit+) {? u16::from_str_radix(s, 10).map_err(|_| "Error when parsing int") }

    u16_hex -> u16
        = "0x" s:$(hexdigit+) {? u16::from_str_radix(s, 16).map_err(|_| "Error when parsing int") }

    u16 -> u16
        = u16_hex / u16_dec

    u8_dec -> u8
        = s:$(digit+) {? u8::from_str_radix(s, 10).map_err(|_| "Error when parsing u8") }

    u8_hex -> u8
        = "0x" s:$(hexdigit+) {? u8::from_str_radix(s, 16).map_err(|_| "Error when parsing int") }

    u8 -> u8
        = u8_hex / u8_dec

    hi_addr -> Value
        = "hi"i ws* "(" ws* a:address ws* ")" { Value::Addr(a, Nibble::High) }

    lo_addr -> Value
        = "lo"i ws* "(" ws* a:address ws* ")" { Value::Addr(a, Nibble::Low) }

    value -> Value
        = u:u8 { Value::Immediate(u) } / hi_addr / lo_addr

    register -> Register
        = "R"i v:$(digit*<1,2>) {? Register::new(v.parse::<u8>().unwrap()) }

    deref -> (Register, Register)
        = "[" h:register ":" l:register "]" { (h, l) }

    string -> String
        = '"' s:asciiChar* '"' { s.into_iter().collect() }

    asciiChar -> char
        = quotedChar / escapeSequence / hexEscapeSequence

    quotedChar -> char
        = !('"' / "\\") c:$. { c.chars().next().unwrap() }

    escapeSequence -> char
        = "\\" !(digit / "x" / "u") c:$(.) {
            match c.chars().next().unwrap() {
                'n' => '\n',
                'r' => '\r',
                't' => '\t',
                 x  => x,
            }
        }

    hexEscapeSequence -> char
        = "\\x" value:$(hexdigit hexdigit) { char::from_u32(u32::from_str_radix(value, 16).unwrap()).unwrap() }

    serializable -> Serializable
        = b:u8 { Serializable::Byte(b) } / s:string { Serializable::String(s) }

// }}}

// Instructions {{{

    // Classes {{{

        nullary<M>
            = m:$(M) { Instruction::Nullary(*OPCODES.get(m).unwrap()) }

        unaryReg<M>
            = m:$(M) ws+ r:register { Instruction::UnaryReg(*OPCODES.get(m).unwrap(), r) }

        unaryAddr<M>
            = m:$(M) ws+ a:address { Instruction::UnaryAddr(*OPCODES.get(m).unwrap(), a) }

        binaryRegIm<M>
            = m:$(M) ws+ r:register comma v:value { Instruction::BinaryRegIm(*OPCODES.get(m).unwrap(), r, v) }

        binaryRegReg<M>
            = m:$(M) ws+ rDst:register comma rSrc:register { Instruction::BinaryRegReg(*OPCODES.get(m).unwrap(), rDst, rSrc) }

        binaryRegAddr<M>
            = m:$(M) ws+ r:register comma a:address { Instruction::BinaryRegAddr(*OPCODES.get(m).unwrap(), r, a) }

        binaryRegDeref<M>
            = m:$(M) ws+ r:register comma d:deref { Instruction::BinaryRegDeref(*OPCODES.get(m).unwrap(), r, d) }

    // }}}

    // Special {{{

        db -> Instruction
            = "db" ws+ vs:serializable ** comma { Instruction::Db(vs) }

        ds -> Instruction
            = "ds" ws+ len:u16 { Instruction::Ds(len) }

        org -> Instruction
            = "org" ws+ addr:u16 { Instruction::Org(addr) }

        include -> Instruction
            = "include" ws+ path:string { Instruction::Include(path) }

        special -> Instruction
            = db / ds / org / include

    // }}}

    // Utility {{{

        nop -> Instruction
            = nullary<"nop">

        stop -> Instruction
            = nullary<"stop">

        sleep -> Instruction
            = nullary<"sleep">

        break -> Instruction
            = nullary<"break">

        ei -> Instruction
            = nullary<"ei">

        di -> Instruction
            = nullary<"di">

        utility -> Instruction
            = nop / stop / sleep / break / ei / di

    // }}}

    // Arithmetics {{{

        add -> Instruction
            = binaryRegReg<"add">

        addc -> Instruction
            = binaryRegReg<"addc">

        sub -> Instruction
            = binaryRegReg<"sub">

        subc -> Instruction
            = binaryRegReg<"subc">

        inc -> Instruction
            = unaryReg<"inc">

        dec -> Instruction
            = unaryReg<"dec">

        and -> Instruction
            = binaryRegReg<"and">

        or -> Instruction
            = binaryRegReg<"or">

        xor -> Instruction
            = binaryRegReg<"xor">

        cmp -> Instruction
            = binaryRegReg<"cmp">

        cmpi -> Instruction
            = binaryRegIm<"cmpi">

        arithmetic -> Instruction
            = add / addc / sub / subc / inc / dec / and / or / xor / cmp / cmpi

    // }}}

    // Flow control {{{

        jmp -> Instruction
            = unaryAddr<"jmp">

        call -> Instruction
            = unaryAddr<"call">

        ret -> Instruction
            = nullary<"ret">

        reti -> Instruction
            = nullary<"reti">

        brc -> Instruction
            = unaryAddr<"brc">

        brnc -> Instruction
            = unaryAddr<"brnc">

        brz -> Instruction
            = unaryAddr<"brz">

        brnz -> Instruction
            = unaryAddr<"brnz">

        control -> Instruction
            = jmp / call / reti / ret / brc / brnc / brz / brnz

    // }}}

    // Load / Store {{{

        mov -> Instruction
            = binaryRegReg<"mov">

        ldi -> Instruction
            = binaryRegIm<"ldi">

        ld -> Instruction
            = binaryRegAddr<"ld">

        st -> Instruction
            = binaryRegAddr<"st">

        ldd -> Instruction
            = binaryRegDeref<"ldd">

        std -> Instruction
            = binaryRegDeref<"std">

        push -> Instruction
            = unaryReg<"push">

        pop -> Instruction
            = unaryReg<"pop">

        lpm -> Instruction
            = binaryRegAddr<"lpm">

        lpmd -> Instruction
            = binaryRegDeref<"lpmd">

        in -> Instruction
            = binaryRegIm<"in">

        out -> Instruction
            = binaryRegIm<"out">

        loadstore -> Instruction
            = mov / ldi / ld / st / ldd / std / push / pop / lpm / lpmd / in / out

    // }}}

// }}}

/// Basic constructs {{{

    label_definition -> Label
        = l:label ws* ":" { l }

    instruction -> Instruction
        = special / loadstore / arithmetic / control / utility

    comment = ";" [^\n]*

    pub parse_line -> Line
        = ws* l:label_definition? ws* i:instruction? ws* comment? { Line { label: l, instruction: i } }

// }}}
